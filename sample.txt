public static void writeFileToKrbHFDS() throws IOException {
		System.out.println("Connect to ADH...");
        // set kerberos host and realm
        System.setProperty("java.security.krb5.realm", "ARENA.RU");
        System.setProperty("java.security.krb5.kdc", "master-0.arena.ru");

        Configuration conf = new Configuration();
		conf.addResource(new Path("conf/core-site.xml"));
		conf.addResource(new Path("conf/hdfs-site.xml"));

        conf.set("hadoop.security.authentication", "kerberos");
        conf.set("hadoop.security.authorization", "true");

        conf.set("fs.hdfs.impl", DistributedFileSystem.class.getName());

        // hack for running locally with fake DNS records
        // set this to true if overriding the host name in /etc/hosts
        conf.set("dfs.client.use.datanode.hostname", "true");

        // server principal
        // the kerberos principle that the namenode is using
        conf.set("dfs.namenode.kerberos.principal.pattern", "hdfs-namenode/*@ARENA.RU");
        UserGroupInformation.setConfiguration(conf);
        UserGroupInformation.loginUserFromKeytab("team0@ARENA.RU", "conf/team0.keytab");

        FileSystem fs = FileSystem.get(conf);
        System.out.print("Подключились к:  ");
        System.out.println(fs.getUri());
        RemoteIterator<LocatedFileStatus> files = fs.listFiles(new Path("./"), true);
        while(files.hasNext()) {
            LocatedFileStatus file = files.next();
            System.out.println(IOUtils.toString(fs.open(file.getPath())));
        }
        Path file = new Path("/user/team0/success");
		if (fs.exists(file)) 
			fs.delete(file, true);
		OutputStream os = fs.create(file, new Progressable() {
			public void progress() {
				System.out.print(".");
			}
		});
		BufferedWriter br = new BufferedWriter(new OutputStreamWriter(os, "UTF-8"));
		br.write(""+new Date(System.currentTimeMillis()));
		br.close();
		fs.close();
	}
